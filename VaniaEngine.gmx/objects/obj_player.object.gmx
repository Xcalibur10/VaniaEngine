<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mir_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>init_player();
init_sprites("ale");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MAIN
//debugging movement
if(global.paused = 1)
{
    image_speed=0;
    exit;
}

if(keyboard_check_pressed(ord("I")))
{
    init_sprites("mir");
}

if(keyboard_check_pressed(ord("O")))
{
    init_sprites("ale");
}


if(keyboard_check(ord("Z")))
{
    grav_force=0;
    vsp=0;
    grounded = true;
    y-=1;
}

if(keyboard_check_pressed(ord("2")))
{
    m_hsp+=-0.15;
}

if(keyboard_check_pressed(ord("3")))
{
    m_hsp+=0.15;
}

if(keyboard_check_pressed(ord("R")))
{
    x=xstart;
    y=ystart;
}

//MAIN OBJECT COLLISION AND MOVEMENT HANDLER
object_collision();
i_frames-=1;
external_force();
sprite_controller(spr_ale_idle,spr_ale_walk,spr_ale_jump,spr_ale_jump,spr_ale_atk,spr_ale_kb);

i_frames = clamp(i_frames,0,60);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_creature">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Knockback
if(other.type=1 and i_frames&lt;=0)
{
    audio_play_sound(sys.plr_hurt,0,0)
    player_knockback();
    i_frames = 60;
    hp-=other.dmg;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sprite_index=spr_atk or sprite_index=spr_atk_cr)
{
    image_speed=0;
    image_index=image_number-1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_text(8,96,"x: " + string(x));
draw_text(80,96,"tx: " + string(floor(x/16)));
draw_text(8,112,"y: " + string(y));
draw_text(80,112,"ty: " + string(floor(y/16)));
draw_text(8,64,"Grounded:" + string(grounded));
draw_text(8,160,"On Slope:" + string(onslope));
//draw_text(8,112,"On Slope:" + string(on_slope()));
//draw_text(8,80,"vsp: " + string(vsp))
*/


//DEBUGGING!!!

if(global.debugmode)
{
    var realFPS = fps_real;
    
    if(realFPS &lt; sys.minFPS)
    {
        minFPS = realFPS
    }
    
    draw_set_colour(c_white)
    draw_text(8,8,"FPS:" + string(realFPS))
    //draw_text(8,32,"Min FPS:" + string(minFPS))
    sys.frameDrawn+=1
    draw_text(8,48,"Frame Drawn:" + string(sys.frameDrawn))
    draw_text(8,60,"Tile-x:" + string(xpos_in_tile()))
    draw_text(8,72,"Tile-y:" + string(ypos_in_tile()))
    
    
    draw_text(8,128,"Room Speed: " + string(room_speed))
    if(instance_exists(obj_player)) then
    {
        draw_text(8,160,"Stair State: "+ string(obj_player.onstair))
    }
    draw_text(8,176,"Jump Cache " + string(sys.jp_cache));
}

//prevFPS = realFPS;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>



var fx = floor(x);
var fy = floor(y);

//var fx = round(x);
//var fy = round(y);

//draw_sprite(mask_index,0,fx,fy);

if(i_frames mod 3=0 or i_frames=0)
{
    draw_sprite_ext(sprite_index,image_index,fx,fy,image_xscale,image_yscale,0,c_white,1);
}


//DEBUGGING---------------------------------
/*

var xoff=0
var yoff=0
var xoff_drw=20
var yoff_drw=20

draw_set_halign(fa_center)
draw_text(fx,fy-yoff_drw,get_cell(fx+xoff,y,0,0));
draw_text(fx-16,fy-yoff_drw,get_cell(fx+xoff,y,-1,0));
draw_text(fx+16,fy-yoff_drw,get_cell(fx+xoff,y,1,0));
draw_text(fx,fy-yoff_drw-16,get_cell(fx+xoff,y,0,-1));
draw_text(fx,fy-yoff_drw+16,get_cell(fx+xoff,y,0,+1));

draw_text(fx-16,fy-yoff_drw+16,get_cell(x+xoff,y,-1,1));
draw_text(fx+16,fy-yoff_drw-16,get_cell(x+xoff,y,1,-1));
draw_text(fx-16,fy-yoff_drw-16,get_cell(x+xoff,y,-1,-1));
draw_text(fx+16,fy-yoff_drw+16,get_cell(x+xoff,y,1,1));


draw_set_halign(fa_left)

draw_text(x-32,y-48,string(x)+" | "+string(y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
