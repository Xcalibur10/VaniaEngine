<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Load and play a song

// Instance variables
sound_index = noone;
track_number = 3;
song_tracks = 0;
song_voices = 0;
pause = false;
name = "";
author = "";
comment = ""
copyright = "";
tempo = 1;
for(var i=7; i&gt;=0; i--)
  mute[i] = false;

// Local variables
var filename;


filename = working_directory + "music/akumajou.nsfe";


// Load a song. The function will return the index to the sound queue
// which can be used if you want to set the gain or do a fade.
sound_index = GME_LoadSong(filename);
if(sound_index != noone)
{
  song_tracks = GME_NumTracks();
  song_voices = GME_NumVoices();
  GME_StartTrack(track_number);
  name = GME_GetName();
  author = GME_GetAuthor();
  comment = GME_GetComment();
  copyright = GME_GetCopyright();
  //GME_Play();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Test various GameMusicEmu functions

// Play (if stopped)
if( keyboard_check_pressed(vk_enter) ) {
  GME_Play();
  pause = false;
}

// Stop
if( keyboard_check_pressed(vk_escape) ) {
  GME_Stop();
  pause = false;
}

// Pause / resume
if( keyboard_check_pressed(vk_space) ) {
  pause = !pause;
  GME_Pause(pause);
}

// Mute / unmute single voice
for(var i=0; i&lt;=7; i++) {
  if( keyboard_check_pressed(ord(string(i+1)))) {
    mute[i] = !mute[i];
    GME_MuteVoice(i, mute[i]);
  }
}

// Volume (gain)
if( keyboard_check_pressed(vk_pageup) )
  audio_sound_gain(sound_index,1,2000);
if( keyboard_check_pressed(vk_pagedown) )
  audio_sound_gain(sound_index,0,2000);

// Set track
if( keyboard_check_pressed(vk_right) ) {
  track_number++;
  if(track_number &gt;= song_tracks)
    track_number = 0;
  GME_StartTrack(track_number);
  GME_Play();
}
if( keyboard_check_pressed(vk_left) ) {
  track_number--;
  if(track_number &lt; 0)
    track_number = song_tracks-1;
  GME_StartTrack(track_number);
  GME_Play();
}

// Mute / unmute multiple voices (bitmask)
if( keyboard_check_pressed(ord("M")) ) {
  GME_MuteVoices(5); // 5 = B00000101 (mute channels 0 and 2
}

// Set tempo
if( keyboard_check_pressed(vk_up) ) {
  tempo += 0.05;
  GME_SetTempo(tempo);
}
if( keyboard_check_pressed(vk_down) ) {
  if(tempo&gt;0.1)
    tempo -= 0.05;
  GME_SetTempo(tempo);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
