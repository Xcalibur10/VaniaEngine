<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ene_skull_glow2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_creature</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

hp=4;
type=1;
dmg=5;

spd=0;

hsp=0;
vsp=0;

old_x=0;
old_y=0;

angle=0;
final_angle=0;

image_speed = 0;

dmg_sprite = spr_ene_skull_dmg;
obj_death = obj_skull_dying;

state = 0;
evasion = false;

/*
0   |   idle
1   |   follow
2   |   evade
3   |   dying
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if(stun_time&gt;0 or global.paused)
{
    exit;
}


var dist = distance_to_object(obj_player);

//Far from player, do nothing!!!
if(dist&gt;128)
{
    exit;
}

//Move skull!
var angle = point_direction(x, y, obj_player.x, obj_player.y-15);
t=global.time;
evasion-=1
    
    if(instance_exists(obj_proj))
    {
        var proj = instance_nearest(x, y, obj_proj);
        var attack_incoming = false;
        
        var x_dist=abs(proj.x-old_x);
        var x_dist_prev=abs(proj.xprevious-xprevious);
        
        
        
        if(x_dist&gt;x_dist_prev) attack_incoming=true;
        show_debug_message("x: "+string(x_dist));
        show_debug_message("e_x: "+string(x));
        show_debug_message("e_px: "+string(old_x));
        
        show_debug_message("px: "+string(x_dist_prev));
        show_debug_message("atk: "+string(attack_incoming));
        
        
        if(obj_player.state=st_attack and abs(proj.y-y)&lt;32 and distance_to_object(proj)&lt;32 and attack_incoming and state=0)
        {
            if(evasion&lt;=0)
            {
                state=2;
                evasion=60;
            }
        }
    }
    
    if(state = 2)
    {
        //spd+=0.5;
    }
    if(evasion&lt;0)
    {
        evasion=0;
        state=0;
    }

    if(dist&gt;70)
    {
        spd-=0.05;
        spd=clamp(spd,0.2,1.5)
    }
    else
    {
        spd=dist/70*1.5;
        spd=clamp(spd,0.4,1.5);
    }
    hsp=lengthdir_x(spd,angle);
    vsp=lengthdir_y(spd,angle);
    if(state=2 and dist&lt;70) vsp-=(evasion*1.75/60);

old_x=x;
old_y=y;
    
x+=hsp
y+=vsp
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index=clamp(3+hsp*-3,0,5);

if(hp&lt;=2)
{
    sprite_index=spr_ene_skull_glow_damaged;
}

if(stun_time&lt;=0 or (stun_time mod 2 = 1 and stun_time&gt;0))
{
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
