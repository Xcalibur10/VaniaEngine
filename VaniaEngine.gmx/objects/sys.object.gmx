<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic stuff
global.time = 0;
global.cycle = 0;
global.edit_mode = false;
global.palette = 0;
global.paused = 0;


global.grid = ds_grid_create(0,0);


loadingtime = get_timer();
surface_resize(application_surface,cam_width,cam_height);
display_set_gui_size(cam_width*3, cam_height*3);
init_input();
zooming = 1;
window_scale = 3;


done_generating = true;

//random_sprite = sprite_add(
application_surface_draw_enable(false);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug vars
draw_set_font(ft_small)

realFPS = 99999
prevFPS = 0;
minFPS = 99999;
frameDrawn=0;

//autotiling
brush = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Store tiles and views
/*
store_tiles();
store_views();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle inputs
input();

if(global.paused = 0)
{
    global.time += 1;
}

if(keyboard_check_pressed(ord("G")))
{
    global.paused = !global.paused; 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debugging

if(keyboard_check(vk_add)) then
{
    room_speed += 1;
}

if(keyboard_check(vk_subtract) and room_speed&gt;1) then
{
    room_speed -= 1;
}

if(room_speed&lt;=1) then room_speed = 1
if(room_speed&gt;=60) then room_speed = 60

//GO TO NEXT ROOM
if(keyboard_check_pressed(ord("R"))) then
{
    room_restart();
    instance_destroy(obj_player);
}

if(keyboard_check_pressed(ord("N")))
{
    room_goto_next()
}

if(keyboard_check(vk_shift) and mouse_check_button_pressed(mb_left))
{
    instance_create(mouse_x,mouse_y,obj_player);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Place / Remove tile

//PLACE TILE
if (mouse_check_button(mb_left) and !keyboard_check(vk_shift))
{

var mx = floor(mouse_x/16)*16
var my = floor(mouse_y/16)*16


//show_debug_message(tile)

//tile_delete(tile)
for(var tx=-1;tx&lt;=1;tx++)
{
    for(var ty=-1;ty&lt;=1;ty++)
    {
    var tile = tile_layer_find(100,mx+(tx*16),my+(ty*16))
    if(tile = -1)
    {
        if(tx == 0 and ty == 0)
        {
        autotile(mouse_x+(tx*16),mouse_y+(ty*16),ts_vania_tile,100);
        }
    }
    if(tile &gt; 0 and global.grid[# mx/16+tx,my/16+ty]==tm_solid)
    {
        tile_delete(tile)
        autotile(mouse_x+(tx*16),mouse_y+(ty*16),ts_vania_tile,100);
    }
    
    }
}
}

if (mouse_check_button(mb_right))
{

var mx = floor(mouse_x/16)*16
var my = floor(mouse_y/16)*16

var tile = tile_layer_find(100,mx,my)

if(tile != -1) then
    {
    tile_delete(tile)
    }
    global.grid[# mx/16, my/16]=tm_air
}

/*
if (mouse_check_button(mb_middle))
{
  
  var mx = floor(mouse_x/16)*16
  var my = floor(mouse_y/16)*16
  
  var tile = tile_layer_find(100,mx,my)
  show_debug_message(string(tile)+" is a slope now!")
  
  if(tile != -1) then
  {
      global.grid[# mx/16, my/16]="s"
  }
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Autotiling

if(keyboard_check(vk_shift) and keyboard_check_pressed(ord("T")))
{
    var rw = room_width/16;
    var rh = room_height/16;
    
    for(i=0;i&lt;=rw;i++)
    {
        for(j=0;j&lt;=rh;j++)
        {
            var tile = tile_layer_find(100,i*16,j*16)
            if(tile &gt; 0 and global.grid[# i,j]==tm_solid) then
            {
                tile_delete(tile);
                autotile(i*16,j*16,ts_grassland,100);
            }
        }
    }
        
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lame zooming stuff
if(keyboard_check_pressed(ord("Q")))
{
   zooming/=0.5; 
   view_wview[0] = cam_width*zooming;
   view_hview[0] = cam_height*zooming;
}

if(keyboard_check_pressed(ord("E")))
{
   zooming*=0.5;
   view_wview[0] = cam_width*zooming;
   view_hview[0] = cam_height*zooming;
}

if(keyboard_check_pressed(ord("O")))
{
    zooming-=1;                                   
    window_set_size(cam_width*window_scale,cam_height*window_scale);
}

if(keyboard_check_pressed(ord("P")))
{
    zooming+=1;                                   
    window_set_size(cam_width*window_scale,cam_height*window_scale);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ds_exists(global.grid,ds_type_grid))
{
    ds_grid_destroy(global.grid);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//autotile_all();

///Store tiles and views

store_tiles();
store_views();

instance_create(0,0,sys_view_bg);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.debugmode=false;

global.nesfont=font_add_sprite(spr_nes_font,ord("!"),0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*

var realFPS = fps_real;

if(realFPS &lt; minFPS)
{
    minFPS = realFPS
}

draw_set_colour(c_white)
draw_text(8,8,"FPS:" + string(realFPS))
//draw_text(8,32,"Min FPS:" + string(minFPS))
frameDrawn+=1
draw_text(8,48,"Frame Drawn:" + string(frameDrawn))
draw_text(8,128,"Room Speed: " + string(room_speed))
if(instance_exists(obj_player)) then
{
    draw_text(8,160,"Stair State: "+ string(obj_player.onstair))
}
draw_text(8,176,"Jump Cache " + string(jp_cache));


//prevFPS = realFPS;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Grid

/*
var rw = room_width;
var rh = room_height;

draw_set_alpha(0.25)

for(var xx=0;xx&lt;rw/16;xx++)
{
    draw_line(0,16*xx,rw,16*xx)
}

for(var yy=0;yy&lt;rh/16;yy++)
{
    draw_line(16*yy,0,16*yy,rh)
}

draw_set_alpha(1)
*/

if(keyboard_check(vk_control))
{
    xx = floor(mouse_x)
    yy = floor(mouse_y)
    draw_text(mouse_x,mouse_y,get_cell(xx,yy,0,0))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
